// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PixiAdapter = (function() {
    PixiAdapter.prototype.render = function() {
      this.renderer.render(this.stage);
      return requestAnimationFrame(this.render);
    };

    function PixiAdapter(scheme_selector, root, rootId) {
      var elId;
      if (scheme_selector == null) {
        scheme_selector = '#scheme';
      }
      if (root == null) {
        root = true;
      }
      if (rootId == null) {
        rootId = '0';
      }
      this.drawLink = __bind(this.drawLink, this);
      this.render = __bind(this.render, this);
      elId = 'scheme' + rootId;
      this.renderer = new PIXI.WebGLRenderer(1000, 600, null, true, true);
      $(this.renderer.view).attr('id', elId);
      $(scheme_selector).append(this.renderer.view);
      if (!root) {
        $('#' + elId).hide();
      }
      this.stage = new PIXI.Stage(0xFFFFFF, true);
      this.stage.mouseup = function(e) {
        return Scheme.mouseup(e);
      };
      requestAnimationFrame(this.render);
      this.stage;
    }

    PixiAdapter.getRealDotPosition = function(dot) {
      return [dot.currentPath.points[0] + dot.worldTransform.tx, dot.currentPath.points[1] + dot.worldTransform.ty];
    };

    PixiAdapter.moveElement = function(el, x, y) {
      return el._.visual.position = {
        x: x,
        y: y
      };
    };

    PixiAdapter.prototype.drawElement = function(el, element_size, icon_size) {
      var element_border_color_hex, element_color_hex, element_hover_color_hex, icon, rect;
      element_color_hex = getConf().element.color;
      element_hover_color_hex = getConf().element.selected.color;
      element_border_color_hex = getConf().element.border.color;
      rect = new PIXI.Graphics();
      rect.beginFill(element_color_hex);
      rect.lineStyle(getConf().element.border.size, element_border_color_hex);
      rect.drawRect(el.X, el.Y, element_size, element_size);
      rect.hitArea = new PIXI.Rectangle(el.X, el.Y, element_size, element_size);
      rect.setInteractive(true);
      rect.mousedown = function(e) {
        var position;
        if (rect.last_click_time + 200 > Date.now()) {
          Scheme.elementDblclick(e, el);
          return false;
        }
        rect.last_click_time = Date.now();
        if (Scheme.selected_element) {
          Scheme.selected_element._.visual.tint = element_color_hex;
        }
        rect.tint = element_hover_color_hex;
        Scheme.selectElement(el);
        position = el._.visual.position;
        Scheme.drag_start_pos = [e.originalEvent.layerX - position.x, e.originalEvent.layerY - position.y];
        return Scheme.mousedown(e, el);
      };
      rect.mouseup = function(e) {
        return Scheme.mouseup(e, el);
      };
      rect.mousemove = function(e) {
        return Scheme.mousemove(e, el);
      };
      this.stage.addChild(rect);
      if (icon_size > 0) {
        icon = new PIXI.Sprite(PIXI.Texture.fromImage("" + (getConf().icon.path) + el.Name + ".ico"));
        icon.position.x = el.X + (element_size - icon_size) / 2;
        icon.position.y = el.Y + (element_size - icon_size) / 2;
        icon.height = icon_size;
        icon.width = icon_size;
        rect.addChild(icon);
      }
      return rect;
    };

    PixiAdapter.prototype.drawDot = function(dot, type, position, dot_color) {
      var circle, dot_hover_color_hex, draw, x, y;
      x = position[0], y = position[1];
      dot_hover_color_hex = getConf().dot.hover_color;
      circle = new PIXI.Graphics();
      draw = function() {
        circle.beginFill(dot_color);
        circle.drawCircle(x, y, getConf().dot.radius.min);
        circle.hitArea = new PIXI.Circle(x, y, getConf().dot.radius.min);
        return circle.setInteractive(true);
      };
      draw();
      circle.mouseover = function() {
        console.log(dot.Name);
        circle.beginFill(dot_hover_color_hex);
        return circle.drawCircle(x, y, getConf().dot.radius.max);
      };
      circle.mouseout = function() {
        circle.clear();
        return draw();
      };
      circle.mouseup = function(e) {
        return Scheme.newLink(e, dot);
      };
      dot._.element._.visual.addChild(circle);
      return circle;
    };

    PixiAdapter.prototype.drawLink = function(start_pos, stop_pos, color, redraw) {
      var e, i, link, path, start_x, start_y, stop_x, stop_y, _i, _len;
      if (redraw == null) {
        redraw = false;
      }
      start_x = start_pos[0], start_y = start_pos[1];
      stop_x = stop_pos[0], stop_y = stop_pos[1];
      if (redraw !== false) {
        link = redraw;
      } else {
        link = new PIXI.Graphics();
      }
      link.lineStyle(1, color);
      link.moveTo(start_x, start_y);
      path = Scheme.newPath(start_x, start_y, stop_x, stop_y, color);
      for (i = _i = 0, _len = path.length; _i < _len; i = _i += 2) {
        e = path[i];
        link.lineTo(path[i], path[i + 1]);
      }
      link.lineTo(stop_x, stop_y);
      if (redraw === false) {
        this.stage.addChild(link);
      }
      return link;
    };

    return PixiAdapter;

  })();

}).call(this);
