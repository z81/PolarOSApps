// Generated by CoffeeScript 1.6.3
(function() {
  var ParserService, SDK, _Element, _Method, _Property, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _Property = (function() {
    var name, value;

    function _Property() {}

    name = null;

    value = null;

    return _Property;

  })();

  _Method = (function() {
    var Name, Params;

    function _Method() {}

    Name = null;

    Params = null;

    return _Method;

  })();

  _Element = (function() {
    var Id, Methods, Name, Property, X, Y;

    function _Element() {}

    Name = null;

    Id = null;

    X = null;

    Y = null;

    Property = [];

    Methods = [];

    return _Element;

  })();

  SDK = (function() {
    function SDK() {}

    SDK.prototype.PackageName = "delphi";

    SDK.prototype.version = '';

    SDK.prototype.Elements = [];

    return SDK;

  })();

  ParserService = (function() {
    var instance;

    ParserService.PosData = {};

    ParserService.StringScheme = "";

    ParserService.sdk = null;

    instance = null;

    function ParserService() {}

    ParserService.getInstance = function() {
      return instance != null ? instance : instance = new ShaParser();
    };

    ParserService.prototype.SubIs = function(Sub, StartPos) {
      var SubLength;
      SubLength = Sub.length;
      return StartPos + SubLength <= this.StringScheme.length && this.StringScheme.substr(StartPos, SubLength) === Sub;
    };

    ParserService.prototype.SetPosIf = function(Sub, StartPos) {
      var Result, SubLength;
      SubLength = Sub.length;
      Result = StartPos + SubLength <= this.StringScheme.length && this.StringScheme.substr(StartPos, SubLength) === Sub;
      if (Result) {
        if (this.PosData == null) {
          this.PosData = {};
        }
        if (this.PosData[Sub]) {
          this.PosData['_' + Sub] = this.PosData[Sub];
        }
        this.PosData[Sub] = StartPos + SubLength;
      }
      return Result;
    };

    ParserService.prototype.getSub = function(Prop1, Prop2) {
      var StartPos, SubLength;
      if (this.PosData[Prop1] && this.PosData[Prop2]) {
        StartPos = this.PosData[Prop1];
        SubLength = this.PosData[Prop2] - StartPos - 1;
        return this.StringScheme.substr(StartPos, SubLength);
      }
    };

    ParserService.prototype.hasPos = function(Prop1) {
      return this.PosData[Prop1];
    };

    ParserService.prototype.getPos = function(Prop1) {
      return this.PosData[Prop1];
    };

    ParserService.prototype.deletePos = function(Prop) {
      return delete this.PosData[Prop];
    };

    ParserService.prototype.ToggleProp = function(Prop) {
      var Result;
      Prop = "is" + Prop;
      Result = this.PosData[Prop];
      if (Result) {
        delete this.PosData[Prop];
      } else {
        this.PosData.Add(Prop, 1);
      }
      return !Result;
    };

    return ParserService;

  })();

  window.ShaParser = (function(_super) {
    __extends(ShaParser, _super);

    function ShaParser() {
      _ref = ShaParser.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ShaParser.prototype.parseExp = function(str) {
      var array, json;
      array = str.split(',', 2);
      if (array.length > 1) {
        json = str.substr(str.indexOf('[')).replace(/\(/gmi, '[').replace(/\)/gmi, ']').replace(/\]\[/gmi, '],[');
        array.push(JSON.parse(json));
      }
      return array;
    };

    ShaParser.prototype.Parse = function(SHA) {
      var El, Element, Head, IsQuote, Method, Prop, i, lastElementNum, name, params, str, thisElementNum, trim, value, _i, _ref1;
      this.StringScheme = SHA.replace(/\*.*[\r\n]/, '');
      this.sdk = new SDK();
      this.sortedElements = [];
      IsQuote = false;
      this.thisProp = "";
      thisElementNum = 0;
      lastElementNum = 0;
      for (i = _i = 0, _ref1 = SHA.length; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (this.SubIs("\"", i)) {
          IsQuote = !IsQuote;
        }
        if (IsQuote) {
          continue;
        }
        this.SetPosIf("Make", i);
        this.SetPosIf("Add", i);
        this.SetPosIf("ver", i);
        this.SetPosIf("BEGIN_SDK", i);
        if (this.SetPosIf("END_SDK", i)) {
          this.deletePos("BEGIN_SDK");
        }
        if (this.SetPosIf("}", i)) {
          lastElementNum = thisElementNum;
          thisElementNum = 0;
          this.deletePos("{");
          this.deletePos("Add");
        }
        this.SetPosIf("{", i);
        if (this.SetPosIf("\n", i)) {
          if (this.hasPos("=") && this.hasPos("{") && this.getPos("=") < this.getPos("\n") && this.thisProp !== "") {
            trim = [' ', '\t', '\r', '\n'];
            value = this.getSub("=", "\n").trim(trim);
            Prop = new _Property();
            Prop.Name = this.thisProp;
            Prop.Value = value;
            Element = this.sdk.Elements[thisElementNum];
            if (Element.Property == null) {
              Element.Property = [];
            }
            Element.Property[Prop.Name] = Prop;
            this.thisProp = "";
          }
        }
        if (this.SetPosIf("=", i)) {
          if (this.hasPos("Add") && this.hasPos("{")) {
            trim = [' ', '\t', '\r', '\n'];
            name = this.getSub("\n", "=").trim(trim);
            this.thisProp = name;
          }
        }
        this.SetPosIf("(", i);
        if (this.SetPosIf(")", i)) {
          if (this.hasPos("Make")) {
            this.sdk.PackageName = this.getSub("(", ")");
            this.deletePos("Make");
          }
          if (this.hasPos("ver")) {
            this.sdk.version = this.getSub("(", ")");
            this.deletePos("ver");
          }
          if (this.hasPos("Add") && !this.hasPos("{") && this.getPos('Add') < this.getPos(')')) {
            Head = this.getSub("(", ")").split(',');
            El = new _Element();
            El.Name = Head[0];
            El.Id = Head[1] * 1;
            El.X = Head[2] * 1;
            El.Y = Head[3] * 1;
            El._ = {};
            if (this.hasPos("BEGIN_SDK")) {
              if (this.sdk.Elements[lastElementNum]._Root) {
                console.log('paprser pre set root', El, El.Name, this.sdk.Elements[lastElementNum]._Root);
                El._Root = this.sdk.Elements[lastElementNum]._Root;
              } else {
                console.log('paprser set root', El, El.Name, this.sdk.Elements[lastElementNum]);
                El._Root = this.sdk.Elements[lastElementNum];
              }
            }
            if (this.hasPos("BEGIN_SDK") && this.last_element.Id === El._Root.Id) {
              El._Root._Container = El;
            }
            this.last_element = El;
            this.sdk.Elements[El.Id] = El;
            this.sortedElements.push(El);
            thisElementNum = El.Id;
            this.deletePos(")");
          }
        }
        if (this.hasPos("{") && this.hasPos("Add") && this.hasPos("(") && this.getPos("Add") < this.getPos("(") && this.getPos("\n") > this.getPos(")")) {
          str = this.getSub("_\n", "\n").trim("\n ");
          Method = new _Method();
          params = str.substr(str.indexOf('(') + 1);
          params = params.substr(0, params.length - 1);
          params = this.parseExp(params);
          Method.Name = params[0], Method.to = params[1], Method.path = params[2];
          Element = this.sdk.Elements[thisElementNum];
          if (Element.Methods == null) {
            Element.Methods = [];
          }
          Element.Methods[params[0]] = Method;
          this.deletePos("(");
          this.deletePos(")");
        }
      }
      return {
        sdk: this.sdk,
        sortedElements: this.sortedElements
      };
    };

    return ShaParser;

  })(ParserService);

}).call(this);
